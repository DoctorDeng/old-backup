<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
<!-- default-autowire="byName" -->
	<!-- <bean id="helloBean" class="test.HelloWorld"></bean>
	<bean id="amercian"  class="practice.Amercian"></bean>
	<bean id="chinese"   class="practice.Chinese"></bean>
	<bean id="doSay"     class="practice.DoSay">
		<property name="say" ref="chinese"></property>
	</bean> -->
	
<!-- 	<bean id="grade" class="com.doctor.entity.Grade">
		<property name="gradeId" value="22"></property>
		<property name="gradeName" value="大三"></property>
	</bean>
	
	<bean id="student3" class="com.doctor.entity.Student" autowire="byName">
		<property name="id" value="1"></property>
		<property name="name" value="Doctor"></property>
		<property name="grade">
			<bean id="grade3" class="com.doctor.entity.Grade" autowire="byName"></bean>
		</property>
	</bean>
	
	<bean id="student" class="com.doctor.entity.Student">
		<property name="id" value="1"></property>
		<property name="name" value="Doctor"></property>
		<property name="grade" ref="grade"></property>
	</bean>
	
	<bean id="student1" class="com.doctor.entity.Student">
		<property name="id" value="2"></property>
		<property name="name" value="XCC"></property>
		<property name="grade">
			<bean id="grade1" class="com.doctor.entity.Grade">
				<property name="gradeId" value="11"></property>
				<property name="gradeName" value="大四"></property>
			</bean>
		</property>
	</bean>
	
	<bean id="testSet" class="com.doctor.entity.TestSet">
		<property name="stringList">
			<list>
				<value>测试String一</value>
				<value>测试String二</value>
				<value>测试String三</value>
			</list>
		</property>
		
		<property name="studentList">
			<list>
				<ref bean="student1" />
				<bean class="com.doctor.entity.Student" ></bean>
			</list>
		</property>
		
		<property name="map">
			<map>
				<entry>
					<key><value>测试Map一</value></key>
					<value>我是测试Map一</value>
				</entry>
				<entry>
					<key><value>测试Map二</value></key>
					<value>我是测试Map二</value>
				</entry>
			</map>
		</property>
		
		<property name="set">
			<set>
				<value>测试Set一</value>
				<value>测试Set二</value>
				<value>测试Set三</value>
			</set>
		</property>
	</bean>
	多例Bean
	<bean id="studentProtoType" class="com.doctor.entity.Student" scope="prototype">
		<property name="id" value="1"></property>
		<property name="name" value="Doctor"></property>
		<property name="grade" ref="grade"></property>
	</bean>
	 -->
<!-- 	<bean id="studentService" class="com.doctor.service.impl.StudentServiceImpl"></bean>
	<bean id="logServiceAdvice" class="com.doctor.advice.LogServiceAdvice"></bean>
	<aop:config>
		定义aop的切面
		<aop:aspect id="logAspect" ref="logServiceAdvice">
			定义切面的切入点
			<aop:pointcut expression="execution(* com.doctor.service.*.*(..))" id="logPointCut"/>		
			前置通知 最开始执行(在所有切入点之前调用)
			<aop:before method="doBefore" pointcut-ref="logPointCut" ></aop:before>
			后置通知 最后执行(在所有切入点之后调用)
			<aop:after method="doAfter" pointcut-ref="logPointCut"/>
			返回通知 在切入点返回以后调用
			<aop:after-returning method="afterReturning" pointcut-ref="logPointCut"/>
			<aop:around method="doAround" pointcut-ref="logPointCut" />
			在切入点发生异常时调用
			<aop:after-throwing method="afterThrowing" pointcut-ref="logPointCut" throwing="ta"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- 加载jdbc属性文件到上下文 -->
    <context:property-placeholder location="jdbc.properties"/>

	<!-- 使用了dbcp数据源，从context读取了jdbc属性文件中设定的值 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 为 JdbcTemplate配置数据源,Spring框架,api封装了JdbcTemplate-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<!-- <constructor-arg name="dataSource" ref="dataSource" /> -->
		<constructor-arg index="0" ref="dataSource"></constructor-arg>
        <!-- <property name="dataSource" ref="dataSource"/> -->
    </bean>
    
    <!-- 向Dao中注入jdbcTemplate -->
    <bean id="studentDao" class="com.doctor.dao.impl.StudentDaoImpl">
    	<property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>
    <!-- 向Service中注入dao -->
    <bean id="studentService" class="com.doctor.service.impl.StudentServiceImpl">
    	<property name="studentDao" ref="studentDao"></property>
    </bean>
    
    <!-- 向Dao中注入jdbcTemplate -->
    <bean id="accountDao" class="com.doctor.dao.impl.AccountDaoImpl">
    	<property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>
    <!-- 向Service中注入dao -->
    <bean id="accountService" class="com.doctor.service.impl.AccountServiceImpl">
    	<property name="accountDao" ref="accountDao"></property>
    </bean>
    
      <!-- 添加事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- this is the service object that we want to make transactional -->
   <!--  <bean id="fooService" class="x.y.service.DefaultFooService"/> -->

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <!-- 定义Spring aop通知 -->
   <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <!--  the transactional semantics... -->
        <tx:attributes>
          <!-- all methods starting with 'get' are read-only -->  
            <tx:method name="get*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
           <!--  使用事务的方法 -->
            <tx:method name="*"/>
           <!--  <tx:method name="insert*" propagation="REQUIRED" /> -->
        </tx:attributes>
    </tx:advice>
	<!-- 定义切入点,引用通知 -->
    <aop:config>
        <aop:pointcut id="accountAspect" expression="execution(* com.doctor.service.AccountService.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="accountAspect"/>
    </aop:config> 
    
    
    <!-- 使用注解方式实现事务管理配置 -->
   <!--  <tx:annotation-driven transaction-manager="transactionManager"/> -->
</beans>